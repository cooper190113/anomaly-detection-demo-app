---
apiVersion: v1
kind: Template
labels:
  teamplate: anomaly-detection-demo-app
metadata:
  name: anomaly-detection-demo
objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: ${APP_SERVICE_NAME}
      labels:
        app: ${APP_SERVICE_NAME}
        service: ${APP_SERVICE_NAME}

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_SERVICE_NAME}
        build: ${APP_SERVICE_NAME}
      name: ${APP_SERVICE_NAME}

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: ${APP_SERVICE_NAME}
      name: ${APP_SERVICE_NAME}
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_SERVICE_NAME}:latest
      runPolicy: Serial
      source:
        git:
          ref: "${GIT_REF}"
          uri: "${GIT_URI}"
        type: Git
      strategy:
        dockerStrategy:
          noCache: true
        type: Source
      triggers:
        - imageChange: {}
          type: ImageChange
        - type: ConfigChange
        - generic:
            secret: "${GENERIC_TRIGGER_SECRET}"
          type: Generic
        - github:
            secret: "${GITHUB_TRIGGER_SECRET}"
          type: GitHub

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APP_SERVICE_NAME}
      labels:
        app: ${APP_SERVICE_NAME}
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      replicas: 1
      selector:
        deploymentconfig: ${APP_SERVICE_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP_SERVICE_NAME}
            deploymentconfig: ${APP_SERVICE_NAME}
        spec:
          containers:
            - name: ${APP_SERVICE_NAME}
              image: ${APP_SERVICE_NAME}/${APP_SERVICE_NAME}:latest
              imagePullPolicy: Always
              env:
                - name: ES_HOST_URL
                  value: ${ELASTICSEARCH_URL}
              ports:
                - containerPort: 8088
                  protocol: TCP
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${APP_SERVICE_NAME}
            from:
              kind: ImageStreamTag
              name: ${APP_SERVICE_NAME}:latest
          type: ImageChange

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APP_SERVICE_NAME}
        template: ${APP_SERVICE_NAME}-app
      name: ${APP_SERVICE_NAME}
    spec:
      ports:
        - name: 8088-tcp
          port: 8088
          protocol: TCP
          targetPort: 8088
      selector:
        deploymentconfig: ${APP_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: ${APP_SERVICE_NAME}
      name: ${APP_SERVICE_NAME}
    spec:
      port:
        targetPort: 8088-tcp
      to:
        kind: Service
        name: ${APP_SERVICE_NAME}

parameters:
  - name: APP_SERVICE_NAME
    displayName: App service name
    value: anomaly-detection-demo
    required: true
  - name: QUAY_REPO
    displayName: Quay Repo Username or Organization
    value: humairak
    required: true
  - name: ELASTICSEARCH_URL
    displayName: Host URL for elasticsearch
    value: http://$(LAD_ELASTICSEARCH_SERVICE_SERVICE_HOST):$(LAD_ELASTICSEARCH_SERVICE_SERVICE_PORT)
    required: false
  - name: GIT_URI
    displayName: Git URI
    description: Git source URI for superset
    value: https://github.com/cooper190113/anomaly-detection-demo-app
    required: true
  - name: GIT_REF
    displayName: Git Ref
    description: Git branch/tag reference
    value: local_build_strategy
    required: true
  - name: GITHUB_TRIGGER_SECRET
    displayName: Github Trigger Secret
    description: Github Trigger Secret
    from: "[a-zA-Z0-9]{8}"
    generate: "expression"
  - name: GENERIC_TRIGGER_SECRET
    displayName: Generic Trigger Secret
    description: Generic Trigger Secret
    from: "[a-zA-Z0-9]{8}"
    generate: "expression"
